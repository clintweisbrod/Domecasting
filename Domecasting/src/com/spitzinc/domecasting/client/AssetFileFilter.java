package com.spitzinc.domecasting.client;

import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.swing.filechooser.FileFilter;

/**
 * FileFilter for ShowPack-generated ZIP files. These are ZIP files created by
 * ShowPack.exe. Within the ZIP file, there are guaranteed to be two files which
 * are unique to ZIPs generated by ShowPack.exe:
 * - A file called Packing.List
 * - A file with the same name as the containing ZIP file but with a .cue extension.
 */

public class AssetFileFilter extends FileFilter
{

	@Override
	public boolean accept(File file)
	{
		boolean result = false;
		
		String fileName = file.getName().toLowerCase();
		if (!fileName.endsWith("zip"))
			return false;

		// We will only accept ZIP files that contain a packing list file called "Packing.List" and
		// a .cue file with same name as ZIP file.
		ZipFile assetFile = null;
		try
		{
			// Attempt to find "Packing.List" and .cue file in the ZIP file
			boolean foundListFile = false;
			boolean foundCueFile = false;
			String cueFileName = removeExtension(file.getName());
			cueFileName = cueFileName + ".cue";
			assetFile = new ZipFile(file);
			Enumeration<? extends ZipEntry> entries = assetFile.entries();
			while(entries.hasMoreElements())
			{
		        ZipEntry entry = entries.nextElement();
		        String entryName = entry.getName();
		        if (!foundListFile)
		        {
			        if (entryName.equals("Packing.List"))
			        	foundListFile = true;
		        }
		        if (!foundCueFile)
		        {
		        	if (entryName.equals(cueFileName))
		        		foundCueFile = true;
		        }
		        if (foundListFile && foundCueFile)
		        {
		        	result = true;
		        	break;
		        }
		    }
		}
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			if (assetFile != null)
				try {
					assetFile.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
		
		return result;
	}

	@Override
	public String getDescription() {
		return "ATM-4 Asset Files";
	}
	
	private String removeExtension(String s)
	{
		String separator = System.getProperty("file.separator");
		String filename;

		// Remove the path upto the filename.
		int lastSeparatorIndex = s.lastIndexOf(separator);
		if (lastSeparatorIndex == -1) {
			filename = s;
		} else {
			filename = s.substring(lastSeparatorIndex + 1);
		}

		// Remove the extension.
		int extensionIndex = filename.lastIndexOf(".");
		if (extensionIndex == -1)
			return filename;

		return filename.substring(0, extensionIndex);
	}

}
